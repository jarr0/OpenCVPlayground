[
  {
    "id": "7fba5e209538441391e4e5d12ef4af7d",
    "func_name": "cvtColor",
    "function": "void cvtColor( InputArray src, OutputArray dst, int code, int dstCn = 0 );",
    "brief_description": "Converts an image from one color space to another.",
    "long_description": "The function converts an input image from one color space to another. In case of a transformation to-from RGB color space, the order of the channels should be specified explicitly (RGB or BGR). Note that the default color format in OpenCV is often referred to as RGB but it is actually BGR (the bytes are reversed). So the first byte in a standard (24-bit) color image will be an 8-bit Blue component, the second byte will be Green, and the third byte will be Red. The fourth, fifth, and sixth bytes would then be the second pixel (Blue, then Green, then Red), and so on.  The conventional ranges for R, G, and B channel values are: -   0 to 255 for CV_8U images -   0 to 65535 for CV_16U images -   0 to 1 for CV_32F images  In case of linear transformations, the range does not matter. But in case of a non-linear transformation, an input RGB image should be normalized to the proper value range to get the correct results, for example, for RGB \\f$\\rightarrow\\f$ L\\*u\\*v\\* transformation. For example, if you have a 32-bit floating-point image directly converted from an 8-bit image without any scaling, then it will have the 0..255 value range instead of 0..1 assumed by the function. So, before calling #cvtColor , you need first to scale the image down: @code     img *= 1./255;     cvtColor(img, img, COLOR_BGR2Luv); @endcode If you use #cvtColor with 8-bit images, the conversion will have some information lost. For many applications, this will not be noticeable but it is recommended to use 32-bit images in applications that need the full range of colors or that convert an image before an operation and then convert back.  If conversion adds the alpha channel, its value will set to the maximum of corresponding channel range: 255 for CV_8U, 65535 for CV_16U, 1 for CV_32F.",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "src",
        "var_desc": "input image: 8-bit unsigned, 16-bit unsigned ( CV_16UC... ), or single-precision floating-point.",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "dst",
        "var_desc": "output image of the same size and depth as src.",
        "var_type": "OutputArray"
      },
      {
        "param_no": 2,
        "param_name": "code",
        "var_desc": "color space conversion code (see #ColorConversionCodes).",
        "var_type": "dropdown:enum",
        "enum_name": "ColorConversionCodes"
      },
      {
        "param_no": 3,
        "param_name": "dstCn",
        "var_desc": "number of channels in the destination image; if the parameter is 0, the number of the channels is derived automatically from src and code.",
        "var_type": "int",
        "default_value": "0"
      }
    ]
  },
  {
    "id": "3b95803ae7204a448348f3767a134216",
    "func_name": "GaussianBlur",
    "function": "void GaussianBlur( InputArray src, OutputArray dst, Size ksize, double sigmaX, double sigmaY = 0, int borderType = BORDER_DEFAULT );",
    "brief_description": "Blurs an image using a Gaussian filter.",
    "long_description": "The function convolves the source image with the specified Gaussian kernel. In-place filtering is supported.",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "src",
        "var_desc": "input image; the image can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "dst",
        "var_desc": "output image of the same size and type as src.",
        "var_type": "OutputArray"
      },
      {
        "param_no": 2,
        "param_name": "ksize",
        "var_desc": "Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. Or, they can be zero's and then they are computed from sigma.",
        "var_type": "Size"
      },
      {
        "param_no": 3,
        "param_name": "sigmaX",
        "var_desc": "Gaussian kernel standard deviation in X direction.",
        "var_type": "double"
      },
      {
        "param_no": 4,
        "param_name": "sigmaY",
        "var_desc": "Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height, respectively (see #getGaussianKernel for details); to fully control the result regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.",
        "var_type": "double",
        "default_value": "0"
      },
      {
        "param_no": 5,
        "param_name": "borderType",
        "var_desc": "pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.",
        "var_type": "dropdown:enum",
        "enum_name": "BorderTypes",
        "default_value": "BORDER_DEFAULT"
      }
    ]
  },
  {
    "id": "03850bb79e3f4b6587841734aa0bc7fe",
    "func_name": "Canny",
    "function": "void Canny( InputArray image, OutputArray edges, double threshold1, double threshold2, int apertureSize = 3, bool L2gradient = false );",
    "brief_description": "Finds edges in an image using the Canny algorithm @cite Canny86 .",
    "long_description": "The function finds edges in the input image and marks them in the output map edges using the Canny algorithm. The smallest value between threshold1 and threshold2 is used for edge linking. The largest value is used to find initial segments of strong edges. See <http://en.wikipedia.org/wiki/Canny_edge_detector>",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "image",
        "var_desc": "8-bit input image.",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "edges",
        "var_desc": "output edge map; single channels 8-bit image, which has the same size as image .",
        "var_type": "OutputArray"
      },
      {
        "param_no": 2,
        "param_name": "threshold1",
        "var_desc": "first threshold for the hysteresis procedure.",
        "var_type": "double"
      },
      {
        "param_no": 3,
        "param_name": "threshold2",
        "var_desc": "second threshold for the hysteresis procedure.",
        "var_type": "double"
      },
      {
        "param_no": 4,
        "param_name": "apertureSize",
        "var_desc": "aperture size for the Sobel operator.",
        "var_type": "int",
        "default_value": "3"
      },
      {
        "param_no": 5,
        "param_name": "L2gradient",
        "var_desc": "a flag, indicating whether a more accurate \\f$L_2\\f$ norm \\f$=\\sqrt{(dI/dx)^2 + (dI/dy)^2}\\f$ should be used to calculate the image gradient magnitude ( L2gradient=true ), or whether the default \\f$L_1\\f$ norm \\f$=|dI/dx|+|dI/dy|\\f$ is enough ( L2gradient=false ).",
        "var_type": "bool",
        "default_value": "false"
      }
    ]
  },
  {
    "id": "8bacabc8fc0c4bd8ae3f1d3d79008e55",
    "func_name": "findContours",
    "function": "void findContours( InputArray image, OutputArrayOfArrays contours, OutputArray hierarchy, int mode, int method, Point offset = Point());",
    "brief_description": "Finds contours in a binary image.",
    "long_description": "The function retrieves contours from the binary image using the algorithm @cite Suzuki85 . The contours are a useful tool for shape analysis and object detection and recognition. See squares.cpp in the OpenCV sample directory. @note Since opencv 3.2 source image is not modified by this function.",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "image",
        "var_desc": "Source, an 8-bit single-channel image. Non-zero pixels are treated as 1's. Zero pixels remain 0's, so the image is treated as binary . You can use #compare, #inRange, #threshold , #adaptiveThreshold, #Canny, and others to create a binary image out of a grayscale or color one. If mode equals to #RETR_CCOMP or #RETR_FLOODFILL, the input can also be a 32-bit integer image of labels (CV_32SC1).",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "contours",
        "var_desc": "Detected contours. Each contour is stored as a vector of points (e.g. std::vector<std::vector<cv::Point> >).",
        "var_type": "OutputArrayOfArrays"
      },
      {
        "param_no": 2,
        "param_name": "hierarchy",
        "var_desc": "Optional output vector (e.g. std::vector<cv::Vec4i>), containing information about the image topology. It has as many elements as the number of contours. For each i-th contour contours[i], the elements hierarchy[i][0] , hierarchy[i][1] , hierarchy[i][2] , and hierarchy[i][3] are set to 0-based indices in contours of the next and previous contours at the same hierarchical level, the first child contour and the parent contour, respectively. If for the contour i there are no next, previous, parent, or nested contours, the corresponding elements of hierarchy[i] will be negative. @note In Python, hierarchy is nested inside a top level array. Use hierarchy[0][i] to access hierarchical elements of i-th contour.",
        "var_type": "OutputArray"
      },
      {
        "param_no": 3,
        "param_name": "mode",
        "var_desc": "Contour retrieval mode, see #RetrievalModes",
        "var_type": "dropdown:enum",
        "enum_name": "RetrievalModes"
      },
      {
        "param_no": 4,
        "param_name": "method",
        "var_desc": "Contour approximation method, see #ContourApproximationModes",
        "var_type": "dropdown:enum",
        "enum_name": "ContourApproximationModes"
      },
      {
        "param_no": 5,
        "param_name": "offset",
        "var_desc": "Optional offset by which every contour point is shifted. This is useful if the contours are extracted from the image ROI and then they should be analyzed in the whole image context.",
        "var_type": "Point",
        "default_value": "Point("
      }
    ]
  },
  {
    "id": "3b06e206af7b45a5bf53a4b29948e712",
    "func_name": "drawContours",
    "function": "void drawContours( InputOutputArray image, InputArrayOfArrays contours, int contourIdx, const Scalar& color, int thickness = 1, int lineType = LINE_8, InputArray hierarchy = noArray(), int maxLevel = INT_MAX, Point offset = Point() );",
    "brief_description": "Draws contours outlines or filled contours.",
    "long_description": "The function draws contour outlines in the image if \\f$\\texttt{thickness} \\ge 0\\f$ or fills the area bounded by the contours if \\f$\\texttt{thickness}<0\\f$ . The example below shows how to retrieve connected components from the binary image and label them: : @include snippets/imgproc_drawContours.cpp",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "image",
        "var_desc": "Destination image.",
        "var_type": "InputOutputArray"
      },
      {
        "param_no": 1,
        "param_name": "contours",
        "var_desc": "All the input contours. Each contour is stored as a point vector.",
        "var_type": "InputArrayOfArrays"
      },
      {
        "param_no": 2,
        "param_name": "contourIdx",
        "var_desc": "Parameter indicating a contour to draw. If it is negative, all the contours are drawn.",
        "var_type": "int"
      },
      {
        "param_no": 3,
        "param_name": "color",
        "var_desc": "Color of the contours.",
        "var_type": "custom:color"
      },
      {
        "param_no": 4,
        "param_name": "thickness",
        "var_desc": "Thickness of lines the contours are drawn with. If it is negative (for example, thickness=#FILLED ), the contour interiors are drawn.",
        "var_type": "int",
        "default_value": "1"
      },
      {
        "param_no": 5,
        "param_name": "lineType",
        "var_desc": "Line connectivity. See #LineTypes",
        "var_type": "dropdown:enum",
        "enum_name": "LineTypes",
        "default_value": "LINE_8"
      },
      {
        "param_no": 6,
        "param_name": "hierarchy",
        "var_desc": "Optional information about hierarchy. It is only needed if you want to draw only some of the contours (see maxLevel ).",
        "var_type": "InputArray",
        "default_value": "noArray()"
      },
      {
        "param_no": 7,
        "param_name": "maxLevel",
        "var_desc": "Maximal level for drawn contours. If it is 0, only the specified contour is drawn. If it is 1, the function draws the contour(s) and all the nested contours. If it is 2, the function draws the contours, all the nested contours, all the nested-to-nested contours, and so on. This parameter is only taken into account when there is hierarchy available.",
        "var_type": "int",
        "default_value": "INT_MAX"
      },
      {
        "param_no": 8,
        "param_name": "offset",
        "var_desc": "Optional contour shift parameter. Shift all the drawn contours by the specified \\f$\\texttt{offset}=(dx,dy)\\f$ . @note When thickness=#FILLED, the function is designed to handle connected components with holes correctly even when no hierarchy data is provided. This is done by analyzing all the outlines together using even-odd rule. This may give incorrect results if you have a joint collection of separately retrieved contours. In order to solve this problem, you need to call #drawContours separately for each sub-group of contours, or iterate over the collection using contourIdx parameter.",
        "var_type": "Point",
        "default_value": "Point("
      }
    ]
  },
  {
    "id": "f07e5ce73f594534967cfe02fff6fb6e",
    "func_name": "threshold",
    "function": "double threshold( InputArray src, OutputArray dst, double thresh, double maxval, int type );",
    "brief_description": "Applies a fixed-level threshold to each array element.",
    "long_description": "The function applies fixed-level thresholding to a multiple-channel array. The function is typically used to get a bi-level (binary) image out of a grayscale image ( #compare could be also used for this purpose) or for removing a noise, that is, filtering out pixels with too small or too large values. There are several types of thresholding supported by the function. They are determined by type parameter.  Also, the special values #THRESH_OTSU or #THRESH_TRIANGLE may be combined with one of the above values. In these cases, the function determines the optimal threshold value using the Otsu's or Triangle algorithm and uses it instead of the specified thresh.  @note Currently, the Otsu's and Triangle methods are implemented only for 8-bit single-channel images.",
    "return_type": "double",
    "signature": [
      {
        "param_no": 0,
        "param_name": "src",
        "var_desc": "input array (multiple-channel, 8-bit or 32-bit floating point).",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "dst",
        "var_desc": "output array of the same size and type and the same number of channels as src.",
        "var_type": "OutputArray"
      },
      {
        "param_no": 2,
        "param_name": "thresh",
        "var_desc": "threshold value.",
        "var_type": "double"
      },
      {
        "param_no": 3,
        "param_name": "maxval",
        "var_desc": "maximum value to use with the #THRESH_BINARY and #THRESH_BINARY_INV thresholding types.",
        "var_type": "double"
      },
      {
        "param_no": 4,
        "param_name": "type",
        "var_desc": "thresholding type (see #ThresholdTypes). @return the computed threshold value if Otsu's or Triangle methods used.",
        "var_type": "dropdown:enum",
        "enum_name": "ThresholdTypes"
      }
    ]
  },
  {
    "id": "70f13816ec6143bca65f29d3962145ab",
    "func_name": "adaptiveThreshold",
    "function": "void adaptiveThreshold( InputArray src, OutputArray dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C );",
    "brief_description": "Applies an adaptive threshold to an array.",
    "long_description": "The function transforms a grayscale image to a binary image according to the formulae: -   **THRESH_BINARY**     \\f[dst(x,y) =  \\fork{\\texttt{maxValue}}{if \\(src(x,y) > T(x,y)\\)}{0}{otherwise}\\f] -   **THRESH_BINARY_INV**     \\f[dst(x,y) =  \\fork{0}{if \\(src(x,y) > T(x,y)\\)}{\\texttt{maxValue}}{otherwise}\\f] where \\f$T(x,y)\\f$ is a threshold calculated individually for each pixel (see adaptiveMethod parameter).  The function can process the image in-place.",
    "return_type": "void",
    "signature": [
      {
        "param_no": 0,
        "param_name": "src",
        "var_desc": "Source 8-bit single-channel image.",
        "var_type": "InputArray"
      },
      {
        "param_no": 1,
        "param_name": "dst",
        "var_desc": "Destination image of the same size and the same type as src.",
        "var_type": "OutputArray"
      },
      {
        "param_no": 2,
        "param_name": "maxValue",
        "var_desc": "Non-zero value assigned to the pixels for which the condition is satisfied",
        "var_type": "double"
      },
      {
        "param_no": 3,
        "param_name": "adaptiveMethod",
        "var_desc": "Adaptive thresholding algorithm to use, see #AdaptiveThresholdTypes. The #BORDER_REPLICATE | #BORDER_ISOLATED is used to process boundaries.",
        "var_type": "dropdown:enum",
        "enum_name": "AdaptiveThresholdTypes"
      },
      {
        "param_no": 4,
        "param_name": "thresholdType",
        "var_desc": "Thresholding type that must be either #THRESH_BINARY or #THRESH_BINARY_INV, see #ThresholdTypes.",
        "var_type": "dropdown:enum",
        "enum_name": "THRESH_BINARY"
      },
      {
        "param_no": 5,
        "param_name": "blockSize",
        "var_desc": "Size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, and so on.",
        "var_type": "int"
      },
      {
        "param_no": 6,
        "param_name": "C",
        "var_desc": "Constant subtracted from the mean or weighted mean (see the details below). Normally, it is positive but may be zero or negative as well.",
        "var_type": "double"
      }
    ]
  }
]
